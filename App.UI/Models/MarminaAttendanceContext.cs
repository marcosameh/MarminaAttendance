// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace App.UI.Models
{
    public partial class MarminaAttendanceContext : DbContext
    {
        public MarminaAttendanceContext()
        {
        }

        public MarminaAttendanceContext(DbContextOptions<MarminaAttendanceContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Classes> Classes { get; set; }
        public virtual DbSet<Servants> Servants { get; set; }
        public virtual DbSet<Served> Served { get; set; }
        public virtual DbSet<Time> Time { get; set; }
        public virtual DbSet<Weeks> Weeks { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.Photo).HasMaxLength(80);

                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.HasMany(d => d.Role)
                    .WithMany(p => p.User)
                    .UsingEntity<Dictionary<string, object>>(
                        "AspNetUserRoles",
                        l => l.HasOne<AspNetRoles>().WithMany().HasForeignKey("RoleId"),
                        r => r.HasOne<AspNetUsers>().WithMany().HasForeignKey("UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId");

                            j.ToTable("AspNetUserRoles");
                        });
            });

            modelBuilder.Entity<Classes>(entity =>
            {
                entity.Property(e => e.Intercessor)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.HasOne(d => d.Time)
                    .WithMany(p => p.Classes)
                    .HasForeignKey(d => d.TimeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Classes_Time");
            });

            modelBuilder.Entity<Servants>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(80);

                entity.Property(e => e.Email)
                    .HasMaxLength(70)
                    .HasDefaultValueSql("(N'ma')");

                entity.Property(e => e.FatherOfConfession).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(350);

                entity.Property(e => e.Phone).HasMaxLength(13);

                entity.Property(e => e.Photo).HasMaxLength(60);

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Servants)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servants_Classes");

                entity.HasMany(d => d.Week)
                    .WithMany(p => p.Servant)
                    .UsingEntity<Dictionary<string, object>>(
                        "ServantWeek",
                        l => l.HasOne<Weeks>().WithMany().HasForeignKey("WeekId").HasConstraintName("FK_ServantWeek_Weeks"),
                        r => r.HasOne<Servants>().WithMany().HasForeignKey("ServantId").HasConstraintName("FK_ServantWeek_Servants"),
                        j =>
                        {
                            j.HasKey("ServantId", "WeekId");

                            j.ToTable("ServantWeek");
                        });
            });

            modelBuilder.Entity<Served>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(80);

                entity.Property(e => e.Birthday).HasColumnType("smalldatetime");

                entity.Property(e => e.FatherOfConfession).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(350);

                entity.Property(e => e.Phone).HasMaxLength(13);

                entity.Property(e => e.Photo).HasMaxLength(60);

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Served)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Served_Classes");

                entity.HasMany(d => d.Week)
                    .WithMany(p => p.Served)
                    .UsingEntity<Dictionary<string, object>>(
                        "ServedWeeks",
                        l => l.HasOne<Weeks>().WithMany().HasForeignKey("WeekId").HasConstraintName("FK_ServedWeeks_Weeks"),
                        r => r.HasOne<Served>().WithMany().HasForeignKey("ServedId").HasConstraintName("FK_ServedWeeks_Served"),
                        j =>
                        {
                            j.HasKey("ServedId", "WeekId");

                            j.ToTable("ServedWeeks");
                        });
            });

            modelBuilder.Entity<Time>(entity =>
            {
                entity.Property(e => e.Time1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Time");
            });

            modelBuilder.Entity<Weeks>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("smalldatetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}